# map address to value
# find neighous addresses
# sum values of neighours whose address is less than current

# 147  142  133  122   59
# 304    5    4    2   57
# 330   10    1    1   54
# 351   11   23   25   26
# 362  747  806--->   ...

test_v = {
     1:   1,
     2:   1,
     3:   2,
     4:   4,
     5:   5,
     6:  10,
     7:  11,
     8:  23,
     9:  25,
    10:  26,
    11:  54,
    12:  57,
    13:  59,
    14: 122,
    15: 133,
    16: 142,
    17: 147,
    18: 304,
    19: 330,
    20: 351,
    21: 362,
    22: 747,
    23: 806,
    24: 854,
    25: 905,
}


#         <------ 60  59  58  57
# 37  36  35  34  33  32  31  56
# 38  17  16  15  14  13  30  55
# 39  18   5   4   3  12  29  54
# 40  19   6   1   2  11  28  53
# 41  20   7   8   9  10  27  52
# 42  21  22  23  24  25  26  51
# 43  44  45  46  47  48  49  50

test_n = {
     1: [ 1,  2,  3,  4,  5,  6,  7,  8,  9], # r=0 center
     2: [ 1,  2,  3,  4,  8,  9, 10, 11, 12], # r=1 chamfer
     3: [ 1,  2,  3,  4, 11, 12, 13, 14, 15], # r=1 corner
     4: [ 1,  2,  3,  4,  5,  6, 14, 15, 16], # r=1 chamfer
     5: [ 1,  4,  5,  6, 15, 16, 17, 18, 19], # r=1 corner
     6: [ 1,  4,  5,  6,  7,  8, 18, 19, 20], # r=1 chamfer
     7: [ 1,  6,  7,  8, 19, 20, 21, 22, 23], # r=1 corner
     8: [ 1,  2,  6,  7,  8,  9, 22, 23, 24], # r=1 chamfer
     9: [ 1,  2,  8,  9, 10, 11, 23, 24, 25], # r=1 corner
    10: [ 2,  9, 10, 11, 24, 25, 26, 27, 28], # r=2 chamfer
    11: [ 2,  3,  9, 10, 11, 12, 27, 28, 29], # r=2 edge
    12: [ 2,  3, 11, 12, 13, 14, 28, 29, 30], # r=2 chamfer
    13: [ 3, 12, 13, 14, 29, 30, 31, 32, 33], # r=2 corner
    14: [ 3,  4, 12, 13, 14, 15, 32, 33, 34], # r=2 chamfer
    15: [ 3,  4,  5, 14, 15, 16, 33, 34, 35], # r=2 edge
    16: [ 4,  5, 15, 16, 17, 18, 34, 35, 36], # r=2 chamfer
    17: [ 5, 16, 17, 18, 35, 36, 37, 38, 39], # r=2 corner
    18: [ 5,  6, 16, 17, 18, 19, 38, 39, 40], # r=2 chamfer
    19: [ 5,  6,  7, 18, 19, 20, 39, 40, 41], # r=2 edge
    20: [ 6,  7, 19, 20, 21, 22, 40, 41, 42], # r=2 chamfer
    21: [ 7, 20, 21, 22, 41, 42, 43, 44, 45], # r=2 corner
    22: [ 7,  8, 20, 21, 22, 23, 44, 45, 46], # r=2 chamfer
    23: [ 7,  8,  9, 22, 23, 24, 45, 46, 47], # r=2 edge
    24: [ 8,  9, 10, 23, 24, 25, 46, 47, 48], # r=2 chamfer
    25: [ 9, 10, 24, 25, 26, 27, 47, 48, 49], # r=2 corner
    26: [10, 25, 26, 27, 48, 49, 50, 51, 52], # r=3 chamfer
    27: [10, 11, 25, 26, 27, 28, 51, 52, 53], # r=3 edge
    28: [10, 11, 12, 27, 28, 29, 52, 53, 54], # r=3 edge
    29: [11, 12, 13, 28, 29, 30, 53, 54, 55], # r=3 edge
    30: [12, 13, 29, 30, 31, 32, 55, 56, 57], # r=3 chamfer
    31: [13, 30, 31, 32, 55, 56, 57, 58, 59], # r=3 corner
    32: [13, 14, 30, 31, 32, 33, 58, 59, 60], # r=3 chamfer
}

def r2c(r):
    return (2*r+1)**2

def a2r(a):
    r=0
    c=1
    while a>c:
        r+=1
        c=r2c(r)
    return r

def a2d(a):
    r=0
    c=1
    while a>c:
        r+=1
        c=r2c(r)
    return r+min([abs(c-r-a), abs(c-3*r-a), abs(c-5*r-a), abs(c-7*r-a)])

def r2p(r):
    if r == 0:
        return 1
    return r2c(r) - r2c(r-1)

def a2ln(a):
    return [e for e in range(a-r2p(a2r(a)), a) if a2d(e) < 2]

m = {}
def a2v(a):
    if a == 1:
        return 1
    if a in m.keys():
        return m[a]
    m[a] = sum(a2v(n) for n in a2n(a) if n < a)
    return m[a]

for a, ns in test_n.items():
    print(a, a2r(a), end=': ')
    for n in ns:
        if n < a:
            print(n, end=' ')
    print()
    print("  %r" % a2r(a))
    print("  %r" % r2p(a2r(a)-1))
    print("  %r" % range(a-r2p(a2r(a)-1), a))

target = 277678

